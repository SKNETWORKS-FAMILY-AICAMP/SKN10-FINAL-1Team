# Generated by Django 5.2.1 on 2025-05-21 08:10

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CodeFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_path', models.TextField()),
                ('language', models.CharField(blank=True, max_length=50)),
                ('latest_commit', models.CharField(blank=True, max_length=40)),
                ('loc', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'code_files',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('doc_type', models.CharField(choices=[('policy', 'Policy'), ('product', 'Product'), ('tech_manual', 'Tech Manual')], max_length=20)),
                ('s3_key', models.TextField(unique=True)),
                ('version', models.CharField(default='v1', max_length=50)),
                ('pinecone_ns', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='accounts.organization')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'documents',
            },
        ),
        migrations.CreateModel(
            name='EmbedChunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('chunk_index', models.PositiveIntegerField()),
                ('pinecone_id', models.CharField(max_length=100)),
                ('hash', models.CharField(max_length=64, unique=True)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='knowledge.document')),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='knowledge.codefile')),
            ],
            options={
                'db_table': 'embed_chunks',
            },
        ),
        migrations.CreateModel(
            name='GitRepository',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('repo_url', models.TextField(unique=True)),
                ('default_branch', models.CharField(default='main', max_length=100)),
                ('fetched_at', models.DateTimeField(blank=True, null=True)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repositories', to='accounts.organization')),
            ],
            options={
                'db_table': 'git_repositories',
            },
        ),
        migrations.AddField(
            model_name='codefile',
            name='repo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='code_files', to='knowledge.gitrepository'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['org', 'doc_type'], name='idx_docs_org_type'),
        ),
        migrations.AddIndex(
            model_name='embedchunk',
            index=models.Index(fields=['document', 'file'], name='idx_chunks_source'),
        ),
        migrations.AddConstraint(
            model_name='embedchunk',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('document__isnull', False), ('file__isnull', True)), models.Q(('document__isnull', True), ('file__isnull', False)), _connector='OR'), name='embed_chunks_one_fk'),
        ),
        migrations.AddIndex(
            model_name='codefile',
            index=models.Index(fields=['repo'], name='idx_files_repo'),
        ),
        migrations.AlterUniqueTogether(
            name='codefile',
            unique_together={('repo', 'file_path')},
        ),
    ]
