"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from dotenv import load_dotenv
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Explicitly load the .env file from the backend directory (BASE_DIR)
dotenv_path = BASE_DIR / '.env'
print(f"--- Attempting to load .env from: {dotenv_path} ---")
# Use override=True to ensure this .env file's values are used.
loaded = load_dotenv(dotenv_path=dotenv_path, override=True)
print(f"--- .env file at {dotenv_path} loaded: {loaded} ---")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Pinecone 설정
PINECONE_API_KEY = os.environ.get('PINECONE_API_KEY')
PINECONE_ENVIRONMENT = os.environ.get('PINECONE_ENVIRONMENT')
# PINECONE_INDEX_NAME = 'your-pinecone-index-name' # Pinecone 인덱스 이름도 .env에 넣고 로드하거나 여기에 직접 지정

# OpenAI 설정
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

# LangGraph API settings
LANGGRAPH_API_URL = os.getenv("LANGGRAPH_API_URL", "http://127.0.0.1:2024")
LANGGRAPH_API_KEY = os.getenv("LANGGRAPH_API_KEY", "")
print(LANGGRAPH_API_KEY,"LANGGRAPH_API_KEY    ",LANGGRAPH_API_URL,"LANGGRAPH_API_URL")
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', 'rest_framework_simplejwt', 'corsheaders',
    'accounts', 'knowledge', 'conversations', 'mlops',
    'pgvector.django',
    'storages', # For AWS S3 storage
    'django_nextjs'
]

# Custom user model
AUTH_USER_MODEL = 'accounts.User'

MIDDLEWARE = [
    # 'corsheaders.middleware.CorsMiddleware',  # CORS 미들웨어는 가장 앞에 위치해야 함 (주석 처리)

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

# URL configuration
APPEND_SLASH = False  # Do not force appending slashes to URLs

# CORS settings (주석 처리 - Django 템플릿 사용으로 전환)
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # Next.js 개발 서버
# ]
# CORS_ALLOW_CREDENTIALS = True
#
# # Add CORS_ALLOWED_METHODS
# CORS_ALLOWED_METHODS = [
#     'DELETE',
#     'GET',
#     'OPTIONS',
#     'PATCH',
#     'POST',
#     'PUT',
# ]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}
#print(DATABASES)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# JWT settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# CORS settings (주석 처리 - Django 템플릿 사용으로 전환)
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000',  # Next.js frontend
# ]
# CORS_ALLOW_CREDENTIALS = True

# AWS S3 Storage Settings
# ------------------------------------------------------------------------------
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('S3_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_DEFAULT_REGION', 'ap-northeast-2') # Default to Seoul region



# --- DEBUGGING PRINT STATEMENTS ---
print("--- AWS S3 SETTINGS DEBUG ---")
print(f"AWS_ACCESS_KEY_ID: {'Loaded' if os.getenv('AWS_ACCESS_KEY_ID') else 'Not Loaded'}")
print(f"AWS_STORAGE_BUCKET_NAME: {os.getenv('S3_BUCKET_NAME')}")
print(f"AWS_S3_REGION_NAME: {os.getenv('AWS_DEFAULT_REGION')}")
print("-----------------------------")

# Media files storage configuration using django-storages
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400', # Cache static files for 1 day
}
AWS_LOCATION = 'media' # Subfolder for media files within the S3 bucket

# Django 4.2+ requires the STORAGES setting. DEFAULT_FILE_STORAGE is deprecated.
STORAGES = {
    # Media files (user uploads)
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },
    # Static files (CSS, JS, etc.) - using standard storage for now
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
# MEDIA_ROOT is not needed when using S3 for media storage


# Login and Logout URLs for session-based authentication
LOGIN_URL = 'accounts:login_page'
LOGOUT_REDIRECT_URL = 'home'

# django-nextjs settings
NEXTJS_SETTINGS = {
    "nextjs_server_url": "http://127.0.0.1:3000"
}
